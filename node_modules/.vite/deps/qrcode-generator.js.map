{
  "version": 3,
  "sources": ["../../qrcode-generator/dist/qrcode.mjs"],
  "sourcesContent": ["//---------------------------------------------------------------------\n//\n// QR Code Generator for JavaScript\n//\n// Copyright (c) 2009 Kazuhiko Arase\n//\n// URL: http://www.d-project.com/\n//\n// Licensed under the MIT license:\n//  http://www.opensource.org/licenses/mit-license.php\n//\n// The word 'QR Code' is registered trademark of\n// DENSO WAVE INCORPORATED\n//  http://www.denso-wave.com/qrcode/faqpatent-e.html\n//\n//---------------------------------------------------------------------\n\n//---------------------------------------------------------------------\n// qrcode\n//---------------------------------------------------------------------\n\n/**\n * qrcode\n * @param typeNumber 1 to 40\n * @param errorCorrectionLevel 'L','M','Q','H'\n */\nexport const qrcode = function(typeNumber, errorCorrectionLevel) {\n\n  const PAD0 = 0xEC;\n  const PAD1 = 0x11;\n\n  let _typeNumber = typeNumber;\n  const _errorCorrectionLevel = QRErrorCorrectionLevel[errorCorrectionLevel];\n  let _modules = null;\n  let _moduleCount = 0;\n  let _dataCache = null;\n  const _dataList = [];\n\n  const _this = {};\n\n  const makeImpl = function(test, maskPattern) {\n\n    _moduleCount = _typeNumber * 4 + 17;\n    _modules = function(moduleCount) {\n      const modules = new Array(moduleCount);\n      for (let row = 0; row < moduleCount; row += 1) {\n        modules[row] = new Array(moduleCount);\n        for (let col = 0; col < moduleCount; col += 1) {\n          modules[row][col] = null;\n        }\n      }\n      return modules;\n    }(_moduleCount);\n\n    setupPositionProbePattern(0, 0);\n    setupPositionProbePattern(_moduleCount - 7, 0);\n    setupPositionProbePattern(0, _moduleCount - 7);\n    setupPositionAdjustPattern();\n    setupTimingPattern();\n    setupTypeInfo(test, maskPattern);\n\n    if (_typeNumber >= 7) {\n      setupTypeNumber(test);\n    }\n\n    if (_dataCache == null) {\n      _dataCache = createData(_typeNumber, _errorCorrectionLevel, _dataList);\n    }\n\n    mapData(_dataCache, maskPattern);\n  };\n\n  const setupPositionProbePattern = function(row, col) {\n\n    for (let r = -1; r <= 7; r += 1) {\n\n      if (row + r <= -1 || _moduleCount <= row + r) continue;\n\n      for (let c = -1; c <= 7; c += 1) {\n\n        if (col + c <= -1 || _moduleCount <= col + c) continue;\n\n        if ( (0 <= r && r <= 6 && (c == 0 || c == 6) )\n            || (0 <= c && c <= 6 && (r == 0 || r == 6) )\n            || (2 <= r && r <= 4 && 2 <= c && c <= 4) ) {\n          _modules[row + r][col + c] = true;\n        } else {\n          _modules[row + r][col + c] = false;\n        }\n      }\n    }\n  };\n\n  const getBestMaskPattern = function() {\n\n    let minLostPoint = 0;\n    let pattern = 0;\n\n    for (let i = 0; i < 8; i += 1) {\n\n      makeImpl(true, i);\n\n      const lostPoint = QRUtil.getLostPoint(_this);\n\n      if (i == 0 || minLostPoint > lostPoint) {\n        minLostPoint = lostPoint;\n        pattern = i;\n      }\n    }\n\n    return pattern;\n  };\n\n  const setupTimingPattern = function() {\n\n    for (let r = 8; r < _moduleCount - 8; r += 1) {\n      if (_modules[r][6] != null) {\n        continue;\n      }\n      _modules[r][6] = (r % 2 == 0);\n    }\n\n    for (let c = 8; c < _moduleCount - 8; c += 1) {\n      if (_modules[6][c] != null) {\n        continue;\n      }\n      _modules[6][c] = (c % 2 == 0);\n    }\n  };\n\n  const setupPositionAdjustPattern = function() {\n\n    const pos = QRUtil.getPatternPosition(_typeNumber);\n\n    for (let i = 0; i < pos.length; i += 1) {\n\n      for (let j = 0; j < pos.length; j += 1) {\n\n        const row = pos[i];\n        const col = pos[j];\n\n        if (_modules[row][col] != null) {\n          continue;\n        }\n\n        for (let r = -2; r <= 2; r += 1) {\n\n          for (let c = -2; c <= 2; c += 1) {\n\n            if (r == -2 || r == 2 || c == -2 || c == 2\n                || (r == 0 && c == 0) ) {\n              _modules[row + r][col + c] = true;\n            } else {\n              _modules[row + r][col + c] = false;\n            }\n          }\n        }\n      }\n    }\n  };\n\n  const setupTypeNumber = function(test) {\n\n    const bits = QRUtil.getBCHTypeNumber(_typeNumber);\n\n    for (let i = 0; i < 18; i += 1) {\n      const mod = (!test && ( (bits >> i) & 1) == 1);\n      _modules[Math.floor(i / 3)][i % 3 + _moduleCount - 8 - 3] = mod;\n    }\n\n    for (let i = 0; i < 18; i += 1) {\n      const mod = (!test && ( (bits >> i) & 1) == 1);\n      _modules[i % 3 + _moduleCount - 8 - 3][Math.floor(i / 3)] = mod;\n    }\n  };\n\n  const setupTypeInfo = function(test, maskPattern) {\n\n    const data = (_errorCorrectionLevel << 3) | maskPattern;\n    const bits = QRUtil.getBCHTypeInfo(data);\n\n    // vertical\n    for (let i = 0; i < 15; i += 1) {\n\n      const mod = (!test && ( (bits >> i) & 1) == 1);\n\n      if (i < 6) {\n        _modules[i][8] = mod;\n      } else if (i < 8) {\n        _modules[i + 1][8] = mod;\n      } else {\n        _modules[_moduleCount - 15 + i][8] = mod;\n      }\n    }\n\n    // horizontal\n    for (let i = 0; i < 15; i += 1) {\n\n      const mod = (!test && ( (bits >> i) & 1) == 1);\n\n      if (i < 8) {\n        _modules[8][_moduleCount - i - 1] = mod;\n      } else if (i < 9) {\n        _modules[8][15 - i - 1 + 1] = mod;\n      } else {\n        _modules[8][15 - i - 1] = mod;\n      }\n    }\n\n    // fixed module\n    _modules[_moduleCount - 8][8] = (!test);\n  };\n\n  const mapData = function(data, maskPattern) {\n\n    let inc = -1;\n    let row = _moduleCount - 1;\n    let bitIndex = 7;\n    let byteIndex = 0;\n    const maskFunc = QRUtil.getMaskFunction(maskPattern);\n\n    for (let col = _moduleCount - 1; col > 0; col -= 2) {\n\n      if (col == 6) col -= 1;\n\n      while (true) {\n\n        for (let c = 0; c < 2; c += 1) {\n\n          if (_modules[row][col - c] == null) {\n\n            let dark = false;\n\n            if (byteIndex < data.length) {\n              dark = ( ( (data[byteIndex] >>> bitIndex) & 1) == 1);\n            }\n\n            const mask = maskFunc(row, col - c);\n\n            if (mask) {\n              dark = !dark;\n            }\n\n            _modules[row][col - c] = dark;\n            bitIndex -= 1;\n\n            if (bitIndex == -1) {\n              byteIndex += 1;\n              bitIndex = 7;\n            }\n          }\n        }\n\n        row += inc;\n\n        if (row < 0 || _moduleCount <= row) {\n          row -= inc;\n          inc = -inc;\n          break;\n        }\n      }\n    }\n  };\n\n  const createBytes = function(buffer, rsBlocks) {\n\n    let offset = 0;\n\n    let maxDcCount = 0;\n    let maxEcCount = 0;\n\n    const dcdata = new Array(rsBlocks.length);\n    const ecdata = new Array(rsBlocks.length);\n\n    for (let r = 0; r < rsBlocks.length; r += 1) {\n\n      const dcCount = rsBlocks[r].dataCount;\n      const ecCount = rsBlocks[r].totalCount - dcCount;\n\n      maxDcCount = Math.max(maxDcCount, dcCount);\n      maxEcCount = Math.max(maxEcCount, ecCount);\n\n      dcdata[r] = new Array(dcCount);\n\n      for (let i = 0; i < dcdata[r].length; i += 1) {\n        dcdata[r][i] = 0xff & buffer.getBuffer()[i + offset];\n      }\n      offset += dcCount;\n\n      const rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);\n      const rawPoly = qrPolynomial(dcdata[r], rsPoly.getLength() - 1);\n\n      const modPoly = rawPoly.mod(rsPoly);\n      ecdata[r] = new Array(rsPoly.getLength() - 1);\n      for (let i = 0; i < ecdata[r].length; i += 1) {\n        const modIndex = i + modPoly.getLength() - ecdata[r].length;\n        ecdata[r][i] = (modIndex >= 0)? modPoly.getAt(modIndex) : 0;\n      }\n    }\n\n    let totalCodeCount = 0;\n    for (let i = 0; i < rsBlocks.length; i += 1) {\n      totalCodeCount += rsBlocks[i].totalCount;\n    }\n\n    const data = new Array(totalCodeCount);\n    let index = 0;\n\n    for (let i = 0; i < maxDcCount; i += 1) {\n      for (let r = 0; r < rsBlocks.length; r += 1) {\n        if (i < dcdata[r].length) {\n          data[index] = dcdata[r][i];\n          index += 1;\n        }\n      }\n    }\n\n    for (let i = 0; i < maxEcCount; i += 1) {\n      for (let r = 0; r < rsBlocks.length; r += 1) {\n        if (i < ecdata[r].length) {\n          data[index] = ecdata[r][i];\n          index += 1;\n        }\n      }\n    }\n\n    return data;\n  };\n\n  const createData = function(typeNumber, errorCorrectionLevel, dataList) {\n\n    const rsBlocks = QRRSBlock.getRSBlocks(typeNumber, errorCorrectionLevel);\n\n    const buffer = qrBitBuffer();\n\n    for (let i = 0; i < dataList.length; i += 1) {\n      const data = dataList[i];\n      buffer.put(data.getMode(), 4);\n      buffer.put(data.getLength(), QRUtil.getLengthInBits(data.getMode(), typeNumber) );\n      data.write(buffer);\n    }\n\n    // calc num max data.\n    let totalDataCount = 0;\n    for (let i = 0; i < rsBlocks.length; i += 1) {\n      totalDataCount += rsBlocks[i].dataCount;\n    }\n\n    if (buffer.getLengthInBits() > totalDataCount * 8) {\n      throw 'code length overflow. ('\n        + buffer.getLengthInBits()\n        + '>'\n        + totalDataCount * 8\n        + ')';\n    }\n\n    // end code\n    if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {\n      buffer.put(0, 4);\n    }\n\n    // padding\n    while (buffer.getLengthInBits() % 8 != 0) {\n      buffer.putBit(false);\n    }\n\n    // padding\n    while (true) {\n\n      if (buffer.getLengthInBits() >= totalDataCount * 8) {\n        break;\n      }\n      buffer.put(PAD0, 8);\n\n      if (buffer.getLengthInBits() >= totalDataCount * 8) {\n        break;\n      }\n      buffer.put(PAD1, 8);\n    }\n\n    return createBytes(buffer, rsBlocks);\n  };\n\n  _this.addData = function(data, mode) {\n\n    mode = mode || 'Byte';\n\n    let newData = null;\n\n    switch(mode) {\n    case 'Numeric' :\n      newData = qrNumber(data);\n      break;\n    case 'Alphanumeric' :\n      newData = qrAlphaNum(data);\n      break;\n    case 'Byte' :\n      newData = qr8BitByte(data);\n      break;\n    case 'Kanji' :\n      newData = qrKanji(data);\n      break;\n    default :\n      throw 'mode:' + mode;\n    }\n\n    _dataList.push(newData);\n    _dataCache = null;\n  };\n\n  _this.isDark = function(row, col) {\n    if (row < 0 || _moduleCount <= row || col < 0 || _moduleCount <= col) {\n      throw row + ',' + col;\n    }\n    return _modules[row][col];\n  };\n\n  _this.getModuleCount = function() {\n    return _moduleCount;\n  };\n\n  _this.make = function() {\n    if (_typeNumber < 1) {\n      let typeNumber = 1;\n\n      for (; typeNumber < 40; typeNumber++) {\n        const rsBlocks = QRRSBlock.getRSBlocks(typeNumber, _errorCorrectionLevel);\n        const buffer = qrBitBuffer();\n\n        for (let i = 0; i < _dataList.length; i++) {\n          const data = _dataList[i];\n          buffer.put(data.getMode(), 4);\n          buffer.put(data.getLength(), QRUtil.getLengthInBits(data.getMode(), typeNumber) );\n          data.write(buffer);\n        }\n\n        let totalDataCount = 0;\n        for (let i = 0; i < rsBlocks.length; i++) {\n          totalDataCount += rsBlocks[i].dataCount;\n        }\n\n        if (buffer.getLengthInBits() <= totalDataCount * 8) {\n          break;\n        }\n      }\n\n      _typeNumber = typeNumber;\n    }\n\n    makeImpl(false, getBestMaskPattern() );\n  };\n\n  _this.createTableTag = function(cellSize, margin) {\n\n    cellSize = cellSize || 2;\n    margin = (typeof margin == 'undefined')? cellSize * 4 : margin;\n\n    let qrHtml = '';\n\n    qrHtml += '<table style=\"';\n    qrHtml += ' border-width: 0px; border-style: none;';\n    qrHtml += ' border-collapse: collapse;';\n    qrHtml += ' padding: 0px; margin: ' + margin + 'px;';\n    qrHtml += '\">';\n    qrHtml += '<tbody>';\n\n    for (let r = 0; r < _this.getModuleCount(); r += 1) {\n\n      qrHtml += '<tr>';\n\n      for (let c = 0; c < _this.getModuleCount(); c += 1) {\n        qrHtml += '<td style=\"';\n        qrHtml += ' border-width: 0px; border-style: none;';\n        qrHtml += ' border-collapse: collapse;';\n        qrHtml += ' padding: 0px; margin: 0px;';\n        qrHtml += ' width: ' + cellSize + 'px;';\n        qrHtml += ' height: ' + cellSize + 'px;';\n        qrHtml += ' background-color: ';\n        qrHtml += _this.isDark(r, c)? '#000000' : '#ffffff';\n        qrHtml += ';';\n        qrHtml += '\"/>';\n      }\n\n      qrHtml += '</tr>';\n    }\n\n    qrHtml += '</tbody>';\n    qrHtml += '</table>';\n\n    return qrHtml;\n  };\n\n  _this.createSvgTag = function(cellSize, margin, alt, title) {\n\n    let opts = {};\n    if (typeof arguments[0] == 'object') {\n      // Called by options.\n      opts = arguments[0];\n      // overwrite cellSize and margin.\n      cellSize = opts.cellSize;\n      margin = opts.margin;\n      alt = opts.alt;\n      title = opts.title;\n    }\n\n    cellSize = cellSize || 2;\n    margin = (typeof margin == 'undefined')? cellSize * 4 : margin;\n\n    // Compose alt property surrogate\n    alt = (typeof alt === 'string') ? {text: alt} : alt || {};\n    alt.text = alt.text || null;\n    alt.id = (alt.text) ? alt.id || 'qrcode-description' : null;\n\n    // Compose title property surrogate\n    title = (typeof title === 'string') ? {text: title} : title || {};\n    title.text = title.text || null;\n    title.id = (title.text) ? title.id || 'qrcode-title' : null;\n\n    const size = _this.getModuleCount() * cellSize + margin * 2;\n    let c, mc, r, mr, qrSvg='', rect;\n\n    rect = 'l' + cellSize + ',0 0,' + cellSize +\n      ' -' + cellSize + ',0 0,-' + cellSize + 'z ';\n\n    qrSvg += '<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"';\n    qrSvg += !opts.scalable ? ' width=\"' + size + 'px\" height=\"' + size + 'px\"' : '';\n    qrSvg += ' viewBox=\"0 0 ' + size + ' ' + size + '\" ';\n    qrSvg += ' preserveAspectRatio=\"xMinYMin meet\"';\n    qrSvg += (title.text || alt.text) ? ' role=\"img\" aria-labelledby=\"' +\n        escapeXml([title.id, alt.id].join(' ').trim() ) + '\"' : '';\n    qrSvg += '>';\n    qrSvg += (title.text) ? '<title id=\"' + escapeXml(title.id) + '\">' +\n        escapeXml(title.text) + '</title>' : '';\n    qrSvg += (alt.text) ? '<description id=\"' + escapeXml(alt.id) + '\">' +\n        escapeXml(alt.text) + '</description>' : '';\n    qrSvg += '<rect width=\"100%\" height=\"100%\" fill=\"white\" cx=\"0\" cy=\"0\"/>';\n    qrSvg += '<path d=\"';\n\n    for (r = 0; r < _this.getModuleCount(); r += 1) {\n      mr = r * cellSize + margin;\n      for (c = 0; c < _this.getModuleCount(); c += 1) {\n        if (_this.isDark(r, c) ) {\n          mc = c*cellSize+margin;\n          qrSvg += 'M' + mc + ',' + mr + rect;\n        }\n      }\n    }\n\n    qrSvg += '\" stroke=\"transparent\" fill=\"black\"/>';\n    qrSvg += '</svg>';\n\n    return qrSvg;\n  };\n\n  _this.createDataURL = function(cellSize, margin) {\n\n    cellSize = cellSize || 2;\n    margin = (typeof margin == 'undefined')? cellSize * 4 : margin;\n\n    const size = _this.getModuleCount() * cellSize + margin * 2;\n    const min = margin;\n    const max = size - margin;\n\n    return createDataURL(size, size, function(x, y) {\n      if (min <= x && x < max && min <= y && y < max) {\n        const c = Math.floor( (x - min) / cellSize);\n        const r = Math.floor( (y - min) / cellSize);\n        return _this.isDark(r, c)? 0 : 1;\n      } else {\n        return 1;\n      }\n    } );\n  };\n\n  _this.createImgTag = function(cellSize, margin, alt) {\n\n    cellSize = cellSize || 2;\n    margin = (typeof margin == 'undefined')? cellSize * 4 : margin;\n\n    const size = _this.getModuleCount() * cellSize + margin * 2;\n\n    let img = '';\n    img += '<img';\n    img += '\\u0020src=\"';\n    img += _this.createDataURL(cellSize, margin);\n    img += '\"';\n    img += '\\u0020width=\"';\n    img += size;\n    img += '\"';\n    img += '\\u0020height=\"';\n    img += size;\n    img += '\"';\n    if (alt) {\n      img += '\\u0020alt=\"';\n      img += escapeXml(alt);\n      img += '\"';\n    }\n    img += '/>';\n\n    return img;\n  };\n\n  const escapeXml = function(s) {\n    let escaped = '';\n    for (let i = 0; i < s.length; i += 1) {\n      const c = s.charAt(i);\n      switch(c) {\n      case '<': escaped += '&lt;'; break;\n      case '>': escaped += '&gt;'; break;\n      case '&': escaped += '&amp;'; break;\n      case '\"': escaped += '&quot;'; break;\n      default : escaped += c; break;\n      }\n    }\n    return escaped;\n  };\n\n  const _createHalfASCII = function(margin) {\n    const cellSize = 1;\n    margin = (typeof margin == 'undefined')? cellSize * 2 : margin;\n\n    const size = _this.getModuleCount() * cellSize + margin * 2;\n    const min = margin;\n    const max = size - margin;\n\n    let y, x, r1, r2, p;\n\n    const blocks = {\n      '██': '█',\n      '█ ': '▀',\n      ' █': '▄',\n      '  ': ' '\n    };\n\n    const blocksLastLineNoMargin = {\n      '██': '▀',\n      '█ ': '▀',\n      ' █': ' ',\n      '  ': ' '\n    };\n\n    let ascii = '';\n    for (y = 0; y < size; y += 2) {\n      r1 = Math.floor((y - min) / cellSize);\n      r2 = Math.floor((y + 1 - min) / cellSize);\n      for (x = 0; x < size; x += 1) {\n        p = '█';\n\n        if (min <= x && x < max && min <= y && y < max && _this.isDark(r1, Math.floor((x - min) / cellSize))) {\n          p = ' ';\n        }\n\n        if (min <= x && x < max && min <= y+1 && y+1 < max && _this.isDark(r2, Math.floor((x - min) / cellSize))) {\n          p += ' ';\n        }\n        else {\n          p += '█';\n        }\n\n        // Output 2 characters per pixel, to create full square. 1 character per pixels gives only half width of square.\n        ascii += (margin < 1 && y+1 >= max) ? blocksLastLineNoMargin[p] : blocks[p];\n      }\n\n      ascii += '\\n';\n    }\n\n    if (size % 2 && margin > 0) {\n      return ascii.substring(0, ascii.length - size - 1) + Array(size+1).join('▀');\n    }\n\n    return ascii.substring(0, ascii.length-1);\n  };\n\n  _this.createASCII = function(cellSize, margin) {\n    cellSize = cellSize || 1;\n\n    if (cellSize < 2) {\n      return _createHalfASCII(margin);\n    }\n\n    cellSize -= 1;\n    margin = (typeof margin == 'undefined')? cellSize * 2 : margin;\n\n    const size = _this.getModuleCount() * cellSize + margin * 2;\n    const min = margin;\n    const max = size - margin;\n\n    let y, x, r, p;\n\n    const white = Array(cellSize+1).join('██');\n    const black = Array(cellSize+1).join('  ');\n\n    let ascii = '';\n    let line = '';\n    for (y = 0; y < size; y += 1) {\n      r = Math.floor( (y - min) / cellSize);\n      line = '';\n      for (x = 0; x < size; x += 1) {\n        p = 1;\n\n        if (min <= x && x < max && min <= y && y < max && _this.isDark(r, Math.floor((x - min) / cellSize))) {\n          p = 0;\n        }\n\n        // Output 2 characters per pixel, to create full square. 1 character per pixels gives only half width of square.\n        line += p ? white : black;\n      }\n\n      for (r = 0; r < cellSize; r += 1) {\n        ascii += line + '\\n';\n      }\n    }\n\n    return ascii.substring(0, ascii.length-1);\n  };\n\n  _this.renderTo2dContext = function(context, cellSize) {\n    cellSize = cellSize || 2;\n    const length = _this.getModuleCount();\n    for (let row = 0; row < length; row++) {\n      for (let col = 0; col < length; col++) {\n        context.fillStyle = _this.isDark(row, col) ? 'black' : 'white';\n        context.fillRect(col * cellSize, row * cellSize, cellSize, cellSize);\n      }\n    }\n  }\n\n  return _this;\n};\n\n//---------------------------------------------------------------------\n// qrcode.stringToBytes\n//---------------------------------------------------------------------\n\nqrcode.stringToBytes = function(s) {\n  const bytes = [];\n  for (let i = 0; i < s.length; i += 1) {\n    const c = s.charCodeAt(i);\n    bytes.push(c & 0xff);\n  }\n  return bytes;\n};\n\n//---------------------------------------------------------------------\n// qrcode.createStringToBytes\n//---------------------------------------------------------------------\n\n/**\n * @param unicodeData base64 string of byte array.\n * [16bit Unicode],[16bit Bytes], ...\n * @param numChars\n */\nqrcode.createStringToBytes = function(unicodeData, numChars) {\n\n  // create conversion map.\n\n  const unicodeMap = function() {\n\n    const bin = base64DecodeInputStream(unicodeData);\n    const read = function() {\n      const b = bin.read();\n      if (b == -1) throw 'eof';\n      return b;\n    };\n\n    let count = 0;\n    const unicodeMap = {};\n    while (true) {\n      const b0 = bin.read();\n      if (b0 == -1) break;\n      const b1 = read();\n      const b2 = read();\n      const b3 = read();\n      const k = String.fromCharCode( (b0 << 8) | b1);\n      const v = (b2 << 8) | b3;\n      unicodeMap[k] = v;\n      count += 1;\n    }\n    if (count != numChars) {\n      throw count + ' != ' + numChars;\n    }\n\n    return unicodeMap;\n  }();\n\n  const unknownChar = '?'.charCodeAt(0);\n\n  return function(s) {\n    const bytes = [];\n    for (let i = 0; i < s.length; i += 1) {\n      const c = s.charCodeAt(i);\n      if (c < 128) {\n        bytes.push(c);\n      } else {\n        const b = unicodeMap[s.charAt(i)];\n        if (typeof b == 'number') {\n          if ( (b & 0xff) == b) {\n            // 1byte\n            bytes.push(b);\n          } else {\n            // 2bytes\n            bytes.push(b >>> 8);\n            bytes.push(b & 0xff);\n          }\n        } else {\n          bytes.push(unknownChar);\n        }\n      }\n    }\n    return bytes;\n  };\n};\n\n//---------------------------------------------------------------------\n// QRMode\n//---------------------------------------------------------------------\n\nconst QRMode = {\n  MODE_NUMBER :    1 << 0,\n  MODE_ALPHA_NUM : 1 << 1,\n  MODE_8BIT_BYTE : 1 << 2,\n  MODE_KANJI :     1 << 3\n};\n\n//---------------------------------------------------------------------\n// QRErrorCorrectionLevel\n//---------------------------------------------------------------------\n\nconst QRErrorCorrectionLevel = {\n  L : 1,\n  M : 0,\n  Q : 3,\n  H : 2\n};\n\n//---------------------------------------------------------------------\n// QRMaskPattern\n//---------------------------------------------------------------------\n\nconst QRMaskPattern = {\n  PATTERN000 : 0,\n  PATTERN001 : 1,\n  PATTERN010 : 2,\n  PATTERN011 : 3,\n  PATTERN100 : 4,\n  PATTERN101 : 5,\n  PATTERN110 : 6,\n  PATTERN111 : 7\n};\n\n//---------------------------------------------------------------------\n// QRUtil\n//---------------------------------------------------------------------\n\nconst QRUtil = function() {\n\n  const PATTERN_POSITION_TABLE = [\n    [],\n    [6, 18],\n    [6, 22],\n    [6, 26],\n    [6, 30],\n    [6, 34],\n    [6, 22, 38],\n    [6, 24, 42],\n    [6, 26, 46],\n    [6, 28, 50],\n    [6, 30, 54],\n    [6, 32, 58],\n    [6, 34, 62],\n    [6, 26, 46, 66],\n    [6, 26, 48, 70],\n    [6, 26, 50, 74],\n    [6, 30, 54, 78],\n    [6, 30, 56, 82],\n    [6, 30, 58, 86],\n    [6, 34, 62, 90],\n    [6, 28, 50, 72, 94],\n    [6, 26, 50, 74, 98],\n    [6, 30, 54, 78, 102],\n    [6, 28, 54, 80, 106],\n    [6, 32, 58, 84, 110],\n    [6, 30, 58, 86, 114],\n    [6, 34, 62, 90, 118],\n    [6, 26, 50, 74, 98, 122],\n    [6, 30, 54, 78, 102, 126],\n    [6, 26, 52, 78, 104, 130],\n    [6, 30, 56, 82, 108, 134],\n    [6, 34, 60, 86, 112, 138],\n    [6, 30, 58, 86, 114, 142],\n    [6, 34, 62, 90, 118, 146],\n    [6, 30, 54, 78, 102, 126, 150],\n    [6, 24, 50, 76, 102, 128, 154],\n    [6, 28, 54, 80, 106, 132, 158],\n    [6, 32, 58, 84, 110, 136, 162],\n    [6, 26, 54, 82, 110, 138, 166],\n    [6, 30, 58, 86, 114, 142, 170]\n  ];\n  const G15 = (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0);\n  const G18 = (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0);\n  const G15_MASK = (1 << 14) | (1 << 12) | (1 << 10) | (1 << 4) | (1 << 1);\n\n  const _this = {};\n\n  const getBCHDigit = function(data) {\n    let digit = 0;\n    while (data != 0) {\n      digit += 1;\n      data >>>= 1;\n    }\n    return digit;\n  };\n\n  _this.getBCHTypeInfo = function(data) {\n    let d = data << 10;\n    while (getBCHDigit(d) - getBCHDigit(G15) >= 0) {\n      d ^= (G15 << (getBCHDigit(d) - getBCHDigit(G15) ) );\n    }\n    return ( (data << 10) | d) ^ G15_MASK;\n  };\n\n  _this.getBCHTypeNumber = function(data) {\n    let d = data << 12;\n    while (getBCHDigit(d) - getBCHDigit(G18) >= 0) {\n      d ^= (G18 << (getBCHDigit(d) - getBCHDigit(G18) ) );\n    }\n    return (data << 12) | d;\n  };\n\n  _this.getPatternPosition = function(typeNumber) {\n    return PATTERN_POSITION_TABLE[typeNumber - 1];\n  };\n\n  _this.getMaskFunction = function(maskPattern) {\n\n    switch (maskPattern) {\n\n    case QRMaskPattern.PATTERN000 :\n      return function(i, j) { return (i + j) % 2 == 0; };\n    case QRMaskPattern.PATTERN001 :\n      return function(i, j) { return i % 2 == 0; };\n    case QRMaskPattern.PATTERN010 :\n      return function(i, j) { return j % 3 == 0; };\n    case QRMaskPattern.PATTERN011 :\n      return function(i, j) { return (i + j) % 3 == 0; };\n    case QRMaskPattern.PATTERN100 :\n      return function(i, j) { return (Math.floor(i / 2) + Math.floor(j / 3) ) % 2 == 0; };\n    case QRMaskPattern.PATTERN101 :\n      return function(i, j) { return (i * j) % 2 + (i * j) % 3 == 0; };\n    case QRMaskPattern.PATTERN110 :\n      return function(i, j) { return ( (i * j) % 2 + (i * j) % 3) % 2 == 0; };\n    case QRMaskPattern.PATTERN111 :\n      return function(i, j) { return ( (i * j) % 3 + (i + j) % 2) % 2 == 0; };\n\n    default :\n      throw 'bad maskPattern:' + maskPattern;\n    }\n  };\n\n  _this.getErrorCorrectPolynomial = function(errorCorrectLength) {\n    let a = qrPolynomial([1], 0);\n    for (let i = 0; i < errorCorrectLength; i += 1) {\n      a = a.multiply(qrPolynomial([1, QRMath.gexp(i)], 0) );\n    }\n    return a;\n  };\n\n  _this.getLengthInBits = function(mode, type) {\n\n    if (1 <= type && type < 10) {\n\n      // 1 - 9\n\n      switch(mode) {\n      case QRMode.MODE_NUMBER    : return 10;\n      case QRMode.MODE_ALPHA_NUM : return 9;\n      case QRMode.MODE_8BIT_BYTE : return 8;\n      case QRMode.MODE_KANJI     : return 8;\n      default :\n        throw 'mode:' + mode;\n      }\n\n    } else if (type < 27) {\n\n      // 10 - 26\n\n      switch(mode) {\n      case QRMode.MODE_NUMBER    : return 12;\n      case QRMode.MODE_ALPHA_NUM : return 11;\n      case QRMode.MODE_8BIT_BYTE : return 16;\n      case QRMode.MODE_KANJI     : return 10;\n      default :\n        throw 'mode:' + mode;\n      }\n\n    } else if (type < 41) {\n\n      // 27 - 40\n\n      switch(mode) {\n      case QRMode.MODE_NUMBER    : return 14;\n      case QRMode.MODE_ALPHA_NUM : return 13;\n      case QRMode.MODE_8BIT_BYTE : return 16;\n      case QRMode.MODE_KANJI     : return 12;\n      default :\n        throw 'mode:' + mode;\n      }\n\n    } else {\n      throw 'type:' + type;\n    }\n  };\n\n  _this.getLostPoint = function(qrcode) {\n\n    const moduleCount = qrcode.getModuleCount();\n\n    let lostPoint = 0;\n\n    // LEVEL1\n\n    for (let row = 0; row < moduleCount; row += 1) {\n      for (let col = 0; col < moduleCount; col += 1) {\n\n        let sameCount = 0;\n        const dark = qrcode.isDark(row, col);\n\n        for (let r = -1; r <= 1; r += 1) {\n\n          if (row + r < 0 || moduleCount <= row + r) {\n            continue;\n          }\n\n          for (let c = -1; c <= 1; c += 1) {\n\n            if (col + c < 0 || moduleCount <= col + c) {\n              continue;\n            }\n\n            if (r == 0 && c == 0) {\n              continue;\n            }\n\n            if (dark == qrcode.isDark(row + r, col + c) ) {\n              sameCount += 1;\n            }\n          }\n        }\n\n        if (sameCount > 5) {\n          lostPoint += (3 + sameCount - 5);\n        }\n      }\n    };\n\n    // LEVEL2\n\n    for (let row = 0; row < moduleCount - 1; row += 1) {\n      for (let col = 0; col < moduleCount - 1; col += 1) {\n        let count = 0;\n        if (qrcode.isDark(row, col) ) count += 1;\n        if (qrcode.isDark(row + 1, col) ) count += 1;\n        if (qrcode.isDark(row, col + 1) ) count += 1;\n        if (qrcode.isDark(row + 1, col + 1) ) count += 1;\n        if (count == 0 || count == 4) {\n          lostPoint += 3;\n        }\n      }\n    }\n\n    // LEVEL3\n\n    for (let row = 0; row < moduleCount; row += 1) {\n      for (let col = 0; col < moduleCount - 6; col += 1) {\n        if (qrcode.isDark(row, col)\n            && !qrcode.isDark(row, col + 1)\n            &&  qrcode.isDark(row, col + 2)\n            &&  qrcode.isDark(row, col + 3)\n            &&  qrcode.isDark(row, col + 4)\n            && !qrcode.isDark(row, col + 5)\n            &&  qrcode.isDark(row, col + 6) ) {\n          lostPoint += 40;\n        }\n      }\n    }\n\n    for (let col = 0; col < moduleCount; col += 1) {\n      for (let row = 0; row < moduleCount - 6; row += 1) {\n        if (qrcode.isDark(row, col)\n            && !qrcode.isDark(row + 1, col)\n            &&  qrcode.isDark(row + 2, col)\n            &&  qrcode.isDark(row + 3, col)\n            &&  qrcode.isDark(row + 4, col)\n            && !qrcode.isDark(row + 5, col)\n            &&  qrcode.isDark(row + 6, col) ) {\n          lostPoint += 40;\n        }\n      }\n    }\n\n    // LEVEL4\n\n    let darkCount = 0;\n\n    for (let col = 0; col < moduleCount; col += 1) {\n      for (let row = 0; row < moduleCount; row += 1) {\n        if (qrcode.isDark(row, col) ) {\n          darkCount += 1;\n        }\n      }\n    }\n\n    const ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;\n    lostPoint += ratio * 10;\n\n    return lostPoint;\n  };\n\n  return _this;\n}();\n\n//---------------------------------------------------------------------\n// QRMath\n//---------------------------------------------------------------------\n\nconst QRMath = function() {\n\n  const EXP_TABLE = new Array(256);\n  const LOG_TABLE = new Array(256);\n\n  // initialize tables\n  for (let i = 0; i < 8; i += 1) {\n    EXP_TABLE[i] = 1 << i;\n  }\n  for (let i = 8; i < 256; i += 1) {\n    EXP_TABLE[i] = EXP_TABLE[i - 4]\n      ^ EXP_TABLE[i - 5]\n      ^ EXP_TABLE[i - 6]\n      ^ EXP_TABLE[i - 8];\n  }\n  for (let i = 0; i < 255; i += 1) {\n    LOG_TABLE[EXP_TABLE[i] ] = i;\n  }\n\n  const _this = {};\n\n  _this.glog = function(n) {\n\n    if (n < 1) {\n      throw 'glog(' + n + ')';\n    }\n\n    return LOG_TABLE[n];\n  };\n\n  _this.gexp = function(n) {\n\n    while (n < 0) {\n      n += 255;\n    }\n\n    while (n >= 256) {\n      n -= 255;\n    }\n\n    return EXP_TABLE[n];\n  };\n\n  return _this;\n}();\n\n//---------------------------------------------------------------------\n// qrPolynomial\n//---------------------------------------------------------------------\n\nconst qrPolynomial = function(num, shift) {\n\n  if (typeof num.length == 'undefined') {\n    throw num.length + '/' + shift;\n  }\n\n  const _num = function() {\n    let offset = 0;\n    while (offset < num.length && num[offset] == 0) {\n      offset += 1;\n    }\n    const _num = new Array(num.length - offset + shift);\n    for (let i = 0; i < num.length - offset; i += 1) {\n      _num[i] = num[i + offset];\n    }\n    return _num;\n  }();\n\n  const _this = {};\n\n  _this.getAt = function(index) {\n    return _num[index];\n  };\n\n  _this.getLength = function() {\n    return _num.length;\n  };\n\n  _this.multiply = function(e) {\n\n    const num = new Array(_this.getLength() + e.getLength() - 1);\n\n    for (let i = 0; i < _this.getLength(); i += 1) {\n      for (let j = 0; j < e.getLength(); j += 1) {\n        num[i + j] ^= QRMath.gexp(QRMath.glog(_this.getAt(i) ) + QRMath.glog(e.getAt(j) ) );\n      }\n    }\n\n    return qrPolynomial(num, 0);\n  };\n\n  _this.mod = function(e) {\n\n    if (_this.getLength() - e.getLength() < 0) {\n      return _this;\n    }\n\n    const ratio = QRMath.glog(_this.getAt(0) ) - QRMath.glog(e.getAt(0) );\n\n    const num = new Array(_this.getLength() );\n    for (let i = 0; i < _this.getLength(); i += 1) {\n      num[i] = _this.getAt(i);\n    }\n\n    for (let i = 0; i < e.getLength(); i += 1) {\n      num[i] ^= QRMath.gexp(QRMath.glog(e.getAt(i) ) + ratio);\n    }\n\n    // recursive call\n    return qrPolynomial(num, 0).mod(e);\n  };\n\n  return _this;\n};\n\n//---------------------------------------------------------------------\n// QRRSBlock\n//---------------------------------------------------------------------\n\nconst QRRSBlock = function() {\n\n  const RS_BLOCK_TABLE = [\n\n    // L\n    // M\n    // Q\n    // H\n\n    // 1\n    [1, 26, 19],\n    [1, 26, 16],\n    [1, 26, 13],\n    [1, 26, 9],\n\n    // 2\n    [1, 44, 34],\n    [1, 44, 28],\n    [1, 44, 22],\n    [1, 44, 16],\n\n    // 3\n    [1, 70, 55],\n    [1, 70, 44],\n    [2, 35, 17],\n    [2, 35, 13],\n\n    // 4\n    [1, 100, 80],\n    [2, 50, 32],\n    [2, 50, 24],\n    [4, 25, 9],\n\n    // 5\n    [1, 134, 108],\n    [2, 67, 43],\n    [2, 33, 15, 2, 34, 16],\n    [2, 33, 11, 2, 34, 12],\n\n    // 6\n    [2, 86, 68],\n    [4, 43, 27],\n    [4, 43, 19],\n    [4, 43, 15],\n\n    // 7\n    [2, 98, 78],\n    [4, 49, 31],\n    [2, 32, 14, 4, 33, 15],\n    [4, 39, 13, 1, 40, 14],\n\n    // 8\n    [2, 121, 97],\n    [2, 60, 38, 2, 61, 39],\n    [4, 40, 18, 2, 41, 19],\n    [4, 40, 14, 2, 41, 15],\n\n    // 9\n    [2, 146, 116],\n    [3, 58, 36, 2, 59, 37],\n    [4, 36, 16, 4, 37, 17],\n    [4, 36, 12, 4, 37, 13],\n\n    // 10\n    [2, 86, 68, 2, 87, 69],\n    [4, 69, 43, 1, 70, 44],\n    [6, 43, 19, 2, 44, 20],\n    [6, 43, 15, 2, 44, 16],\n\n    // 11\n    [4, 101, 81],\n    [1, 80, 50, 4, 81, 51],\n    [4, 50, 22, 4, 51, 23],\n    [3, 36, 12, 8, 37, 13],\n\n    // 12\n    [2, 116, 92, 2, 117, 93],\n    [6, 58, 36, 2, 59, 37],\n    [4, 46, 20, 6, 47, 21],\n    [7, 42, 14, 4, 43, 15],\n\n    // 13\n    [4, 133, 107],\n    [8, 59, 37, 1, 60, 38],\n    [8, 44, 20, 4, 45, 21],\n    [12, 33, 11, 4, 34, 12],\n\n    // 14\n    [3, 145, 115, 1, 146, 116],\n    [4, 64, 40, 5, 65, 41],\n    [11, 36, 16, 5, 37, 17],\n    [11, 36, 12, 5, 37, 13],\n\n    // 15\n    [5, 109, 87, 1, 110, 88],\n    [5, 65, 41, 5, 66, 42],\n    [5, 54, 24, 7, 55, 25],\n    [11, 36, 12, 7, 37, 13],\n\n    // 16\n    [5, 122, 98, 1, 123, 99],\n    [7, 73, 45, 3, 74, 46],\n    [15, 43, 19, 2, 44, 20],\n    [3, 45, 15, 13, 46, 16],\n\n    // 17\n    [1, 135, 107, 5, 136, 108],\n    [10, 74, 46, 1, 75, 47],\n    [1, 50, 22, 15, 51, 23],\n    [2, 42, 14, 17, 43, 15],\n\n    // 18\n    [5, 150, 120, 1, 151, 121],\n    [9, 69, 43, 4, 70, 44],\n    [17, 50, 22, 1, 51, 23],\n    [2, 42, 14, 19, 43, 15],\n\n    // 19\n    [3, 141, 113, 4, 142, 114],\n    [3, 70, 44, 11, 71, 45],\n    [17, 47, 21, 4, 48, 22],\n    [9, 39, 13, 16, 40, 14],\n\n    // 20\n    [3, 135, 107, 5, 136, 108],\n    [3, 67, 41, 13, 68, 42],\n    [15, 54, 24, 5, 55, 25],\n    [15, 43, 15, 10, 44, 16],\n\n    // 21\n    [4, 144, 116, 4, 145, 117],\n    [17, 68, 42],\n    [17, 50, 22, 6, 51, 23],\n    [19, 46, 16, 6, 47, 17],\n\n    // 22\n    [2, 139, 111, 7, 140, 112],\n    [17, 74, 46],\n    [7, 54, 24, 16, 55, 25],\n    [34, 37, 13],\n\n    // 23\n    [4, 151, 121, 5, 152, 122],\n    [4, 75, 47, 14, 76, 48],\n    [11, 54, 24, 14, 55, 25],\n    [16, 45, 15, 14, 46, 16],\n\n    // 24\n    [6, 147, 117, 4, 148, 118],\n    [6, 73, 45, 14, 74, 46],\n    [11, 54, 24, 16, 55, 25],\n    [30, 46, 16, 2, 47, 17],\n\n    // 25\n    [8, 132, 106, 4, 133, 107],\n    [8, 75, 47, 13, 76, 48],\n    [7, 54, 24, 22, 55, 25],\n    [22, 45, 15, 13, 46, 16],\n\n    // 26\n    [10, 142, 114, 2, 143, 115],\n    [19, 74, 46, 4, 75, 47],\n    [28, 50, 22, 6, 51, 23],\n    [33, 46, 16, 4, 47, 17],\n\n    // 27\n    [8, 152, 122, 4, 153, 123],\n    [22, 73, 45, 3, 74, 46],\n    [8, 53, 23, 26, 54, 24],\n    [12, 45, 15, 28, 46, 16],\n\n    // 28\n    [3, 147, 117, 10, 148, 118],\n    [3, 73, 45, 23, 74, 46],\n    [4, 54, 24, 31, 55, 25],\n    [11, 45, 15, 31, 46, 16],\n\n    // 29\n    [7, 146, 116, 7, 147, 117],\n    [21, 73, 45, 7, 74, 46],\n    [1, 53, 23, 37, 54, 24],\n    [19, 45, 15, 26, 46, 16],\n\n    // 30\n    [5, 145, 115, 10, 146, 116],\n    [19, 75, 47, 10, 76, 48],\n    [15, 54, 24, 25, 55, 25],\n    [23, 45, 15, 25, 46, 16],\n\n    // 31\n    [13, 145, 115, 3, 146, 116],\n    [2, 74, 46, 29, 75, 47],\n    [42, 54, 24, 1, 55, 25],\n    [23, 45, 15, 28, 46, 16],\n\n    // 32\n    [17, 145, 115],\n    [10, 74, 46, 23, 75, 47],\n    [10, 54, 24, 35, 55, 25],\n    [19, 45, 15, 35, 46, 16],\n\n    // 33\n    [17, 145, 115, 1, 146, 116],\n    [14, 74, 46, 21, 75, 47],\n    [29, 54, 24, 19, 55, 25],\n    [11, 45, 15, 46, 46, 16],\n\n    // 34\n    [13, 145, 115, 6, 146, 116],\n    [14, 74, 46, 23, 75, 47],\n    [44, 54, 24, 7, 55, 25],\n    [59, 46, 16, 1, 47, 17],\n\n    // 35\n    [12, 151, 121, 7, 152, 122],\n    [12, 75, 47, 26, 76, 48],\n    [39, 54, 24, 14, 55, 25],\n    [22, 45, 15, 41, 46, 16],\n\n    // 36\n    [6, 151, 121, 14, 152, 122],\n    [6, 75, 47, 34, 76, 48],\n    [46, 54, 24, 10, 55, 25],\n    [2, 45, 15, 64, 46, 16],\n\n    // 37\n    [17, 152, 122, 4, 153, 123],\n    [29, 74, 46, 14, 75, 47],\n    [49, 54, 24, 10, 55, 25],\n    [24, 45, 15, 46, 46, 16],\n\n    // 38\n    [4, 152, 122, 18, 153, 123],\n    [13, 74, 46, 32, 75, 47],\n    [48, 54, 24, 14, 55, 25],\n    [42, 45, 15, 32, 46, 16],\n\n    // 39\n    [20, 147, 117, 4, 148, 118],\n    [40, 75, 47, 7, 76, 48],\n    [43, 54, 24, 22, 55, 25],\n    [10, 45, 15, 67, 46, 16],\n\n    // 40\n    [19, 148, 118, 6, 149, 119],\n    [18, 75, 47, 31, 76, 48],\n    [34, 54, 24, 34, 55, 25],\n    [20, 45, 15, 61, 46, 16]\n  ];\n\n  const qrRSBlock = function(totalCount, dataCount) {\n    const _this = {};\n    _this.totalCount = totalCount;\n    _this.dataCount = dataCount;\n    return _this;\n  };\n\n  const _this = {};\n\n  const getRsBlockTable = function(typeNumber, errorCorrectionLevel) {\n\n    switch(errorCorrectionLevel) {\n    case QRErrorCorrectionLevel.L :\n      return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];\n    case QRErrorCorrectionLevel.M :\n      return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];\n    case QRErrorCorrectionLevel.Q :\n      return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];\n    case QRErrorCorrectionLevel.H :\n      return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];\n    default :\n      return undefined;\n    }\n  };\n\n  _this.getRSBlocks = function(typeNumber, errorCorrectionLevel) {\n\n    const rsBlock = getRsBlockTable(typeNumber, errorCorrectionLevel);\n\n    if (typeof rsBlock == 'undefined') {\n      throw 'bad rs block @ typeNumber:' + typeNumber +\n          '/errorCorrectionLevel:' + errorCorrectionLevel;\n    }\n\n    const length = rsBlock.length / 3;\n\n    const list = [];\n\n    for (let i = 0; i < length; i += 1) {\n\n      const count = rsBlock[i * 3 + 0];\n      const totalCount = rsBlock[i * 3 + 1];\n      const dataCount = rsBlock[i * 3 + 2];\n\n      for (let j = 0; j < count; j += 1) {\n        list.push(qrRSBlock(totalCount, dataCount) );\n      }\n    }\n\n    return list;\n  };\n\n  return _this;\n}();\n\n//---------------------------------------------------------------------\n// qrBitBuffer\n//---------------------------------------------------------------------\n\nconst qrBitBuffer = function() {\n\n  const _buffer = [];\n  let _length = 0;\n\n  const _this = {};\n\n  _this.getBuffer = function() {\n    return _buffer;\n  };\n\n  _this.getAt = function(index) {\n    const bufIndex = Math.floor(index / 8);\n    return ( (_buffer[bufIndex] >>> (7 - index % 8) ) & 1) == 1;\n  };\n\n  _this.put = function(num, length) {\n    for (let i = 0; i < length; i += 1) {\n      _this.putBit( ( (num >>> (length - i - 1) ) & 1) == 1);\n    }\n  };\n\n  _this.getLengthInBits = function() {\n    return _length;\n  };\n\n  _this.putBit = function(bit) {\n\n    const bufIndex = Math.floor(_length / 8);\n    if (_buffer.length <= bufIndex) {\n      _buffer.push(0);\n    }\n\n    if (bit) {\n      _buffer[bufIndex] |= (0x80 >>> (_length % 8) );\n    }\n\n    _length += 1;\n  };\n\n  return _this;\n};\n\n//---------------------------------------------------------------------\n// qrNumber\n//---------------------------------------------------------------------\n\nconst qrNumber = function(data) {\n\n  const _mode = QRMode.MODE_NUMBER;\n  const _data = data;\n\n  const _this = {};\n\n  _this.getMode = function() {\n    return _mode;\n  };\n\n  _this.getLength = function(buffer) {\n    return _data.length;\n  };\n\n  _this.write = function(buffer) {\n\n    const data = _data;\n\n    let i = 0;\n\n    while (i + 2 < data.length) {\n      buffer.put(strToNum(data.substring(i, i + 3) ), 10);\n      i += 3;\n    }\n\n    if (i < data.length) {\n      if (data.length - i == 1) {\n        buffer.put(strToNum(data.substring(i, i + 1) ), 4);\n      } else if (data.length - i == 2) {\n        buffer.put(strToNum(data.substring(i, i + 2) ), 7);\n      }\n    }\n  };\n\n  const strToNum = function(s) {\n    let num = 0;\n    for (let i = 0; i < s.length; i += 1) {\n      num = num * 10 + chatToNum(s.charAt(i) );\n    }\n    return num;\n  };\n\n  const chatToNum = function(c) {\n    if ('0' <= c && c <= '9') {\n      return c.charCodeAt(0) - '0'.charCodeAt(0);\n    }\n    throw 'illegal char :' + c;\n  };\n\n  return _this;\n};\n\n//---------------------------------------------------------------------\n// qrAlphaNum\n//---------------------------------------------------------------------\n\nconst qrAlphaNum = function(data) {\n\n  const _mode = QRMode.MODE_ALPHA_NUM;\n  const _data = data;\n\n  const _this = {};\n\n  _this.getMode = function() {\n    return _mode;\n  };\n\n  _this.getLength = function(buffer) {\n    return _data.length;\n  };\n\n  _this.write = function(buffer) {\n\n    const s = _data;\n\n    let i = 0;\n\n    while (i + 1 < s.length) {\n      buffer.put(\n        getCode(s.charAt(i) ) * 45 +\n        getCode(s.charAt(i + 1) ), 11);\n      i += 2;\n    }\n\n    if (i < s.length) {\n      buffer.put(getCode(s.charAt(i) ), 6);\n    }\n  };\n\n  const getCode = function(c) {\n\n    if ('0' <= c && c <= '9') {\n      return c.charCodeAt(0) - '0'.charCodeAt(0);\n    } else if ('A' <= c && c <= 'Z') {\n      return c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n    } else {\n      switch (c) {\n      case '\\u0020' : return 36;\n      case '$' : return 37;\n      case '%' : return 38;\n      case '*' : return 39;\n      case '+' : return 40;\n      case '-' : return 41;\n      case '.' : return 42;\n      case '/' : return 43;\n      case ':' : return 44;\n      default :\n        throw 'illegal char :' + c;\n      }\n    }\n  };\n\n  return _this;\n};\n\n//---------------------------------------------------------------------\n// qr8BitByte\n//---------------------------------------------------------------------\n\nconst qr8BitByte = function(data) {\n\n  const _mode = QRMode.MODE_8BIT_BYTE;\n  const _data = data;\n  const _bytes = qrcode.stringToBytes(data);\n\n  const _this = {};\n\n  _this.getMode = function() {\n    return _mode;\n  };\n\n  _this.getLength = function(buffer) {\n    return _bytes.length;\n  };\n\n  _this.write = function(buffer) {\n    for (let i = 0; i < _bytes.length; i += 1) {\n      buffer.put(_bytes[i], 8);\n    }\n  };\n\n  return _this;\n};\n\n//---------------------------------------------------------------------\n// qrKanji\n//---------------------------------------------------------------------\n\nconst qrKanji = function(data) {\n\n  const _mode = QRMode.MODE_KANJI;\n  const _data = data;\n\n  const stringToBytes = qrcode.stringToBytes;\n  !function(c, code) {\n    // self test for sjis support.\n    const test = stringToBytes(c);\n    if (test.length != 2 || ( (test[0] << 8) | test[1]) != code) {\n      throw 'sjis not supported.';\n    }\n  }('\\u53cb', 0x9746);\n\n  const _bytes = stringToBytes(data);\n\n  const _this = {};\n\n  _this.getMode = function() {\n    return _mode;\n  };\n\n  _this.getLength = function(buffer) {\n    return ~~(_bytes.length / 2);\n  };\n\n  _this.write = function(buffer) {\n\n    const data = _bytes;\n\n    let i = 0;\n\n    while (i + 1 < data.length) {\n\n      let c = ( (0xff & data[i]) << 8) | (0xff & data[i + 1]);\n\n      if (0x8140 <= c && c <= 0x9FFC) {\n        c -= 0x8140;\n      } else if (0xE040 <= c && c <= 0xEBBF) {\n        c -= 0xC140;\n      } else {\n        throw 'illegal char at ' + (i + 1) + '/' + c;\n      }\n\n      c = ( (c >>> 8) & 0xff) * 0xC0 + (c & 0xff);\n\n      buffer.put(c, 13);\n\n      i += 2;\n    }\n\n    if (i < data.length) {\n      throw 'illegal char at ' + (i + 1);\n    }\n  };\n\n  return _this;\n};\n\n//=====================================================================\n// GIF Support etc.\n//\n\n//---------------------------------------------------------------------\n// byteArrayOutputStream\n//---------------------------------------------------------------------\n\nconst byteArrayOutputStream = function() {\n\n  const _bytes = [];\n\n  const _this = {};\n\n  _this.writeByte = function(b) {\n    _bytes.push(b & 0xff);\n  };\n\n  _this.writeShort = function(i) {\n    _this.writeByte(i);\n    _this.writeByte(i >>> 8);\n  };\n\n  _this.writeBytes = function(b, off, len) {\n    off = off || 0;\n    len = len || b.length;\n    for (let i = 0; i < len; i += 1) {\n      _this.writeByte(b[i + off]);\n    }\n  };\n\n  _this.writeString = function(s) {\n    for (let i = 0; i < s.length; i += 1) {\n      _this.writeByte(s.charCodeAt(i) );\n    }\n  };\n\n  _this.toByteArray = function() {\n    return _bytes;\n  };\n\n  _this.toString = function() {\n    let s = '';\n    s += '[';\n    for (let i = 0; i < _bytes.length; i += 1) {\n      if (i > 0) {\n        s += ',';\n      }\n      s += _bytes[i];\n    }\n    s += ']';\n    return s;\n  };\n\n  return _this;\n};\n\n//---------------------------------------------------------------------\n// base64EncodeOutputStream\n//---------------------------------------------------------------------\n\nconst base64EncodeOutputStream = function() {\n\n  let _buffer = 0;\n  let _buflen = 0;\n  let _length = 0;\n  let _base64 = '';\n\n  const _this = {};\n\n  const writeEncoded = function(b) {\n    _base64 += String.fromCharCode(encode(b & 0x3f) );\n  };\n\n  const encode = function(n) {\n    if (n < 0) {\n      throw 'n:' + n;\n    } else if (n < 26) {\n      return 0x41 + n;\n    } else if (n < 52) {\n      return 0x61 + (n - 26);\n    } else if (n < 62) {\n      return 0x30 + (n - 52);\n    } else if (n == 62) {\n      return 0x2b;\n    } else if (n == 63) {\n      return 0x2f;\n    } else {\n      throw 'n:' + n;\n    }\n  };\n\n  _this.writeByte = function(n) {\n\n    _buffer = (_buffer << 8) | (n & 0xff);\n    _buflen += 8;\n    _length += 1;\n\n    while (_buflen >= 6) {\n      writeEncoded(_buffer >>> (_buflen - 6) );\n      _buflen -= 6;\n    }\n  };\n\n  _this.flush = function() {\n\n    if (_buflen > 0) {\n      writeEncoded(_buffer << (6 - _buflen) );\n      _buffer = 0;\n      _buflen = 0;\n    }\n\n    if (_length % 3 != 0) {\n      // padding\n      const padlen = 3 - _length % 3;\n      for (let i = 0; i < padlen; i += 1) {\n        _base64 += '=';\n      }\n    }\n  };\n\n  _this.toString = function() {\n    return _base64;\n  };\n\n  return _this;\n};\n\n//---------------------------------------------------------------------\n// base64DecodeInputStream\n//---------------------------------------------------------------------\n\nconst base64DecodeInputStream = function(str) {\n\n  const _str = str;\n  let _pos = 0;\n  let _buffer = 0;\n  let _buflen = 0;\n\n  const _this = {};\n\n  _this.read = function() {\n\n    while (_buflen < 8) {\n\n      if (_pos >= _str.length) {\n        if (_buflen == 0) {\n          return -1;\n        }\n        throw 'unexpected end of file./' + _buflen;\n      }\n\n      const c = _str.charAt(_pos);\n      _pos += 1;\n\n      if (c == '=') {\n        _buflen = 0;\n        return -1;\n      } else if (c.match(/^\\s$/) ) {\n        // ignore if whitespace.\n        continue;\n      }\n\n      _buffer = (_buffer << 6) | decode(c.charCodeAt(0) );\n      _buflen += 6;\n    }\n\n    const n = (_buffer >>> (_buflen - 8) ) & 0xff;\n    _buflen -= 8;\n    return n;\n  };\n\n  const decode = function(c) {\n    if (0x41 <= c && c <= 0x5a) {\n      return c - 0x41;\n    } else if (0x61 <= c && c <= 0x7a) {\n      return c - 0x61 + 26;\n    } else if (0x30 <= c && c <= 0x39) {\n      return c - 0x30 + 52;\n    } else if (c == 0x2b) {\n      return 62;\n    } else if (c == 0x2f) {\n      return 63;\n    } else {\n      throw 'c:' + c;\n    }\n  };\n\n  return _this;\n};\n\n//---------------------------------------------------------------------\n// gifImage (B/W)\n//---------------------------------------------------------------------\n\nconst gifImage = function(width, height) {\n\n  const _width = width;\n  const _height = height;\n  const _data = new Array(width * height);\n\n  const _this = {};\n\n  _this.setPixel = function(x, y, pixel) {\n    _data[y * _width + x] = pixel;\n  };\n\n  _this.write = function(out) {\n\n    //---------------------------------\n    // GIF Signature\n\n    out.writeString('GIF87a');\n\n    //---------------------------------\n    // Screen Descriptor\n\n    out.writeShort(_width);\n    out.writeShort(_height);\n\n    out.writeByte(0x80); // 2bit\n    out.writeByte(0);\n    out.writeByte(0);\n\n    //---------------------------------\n    // Global Color Map\n\n    // black\n    out.writeByte(0x00);\n    out.writeByte(0x00);\n    out.writeByte(0x00);\n\n    // white\n    out.writeByte(0xff);\n    out.writeByte(0xff);\n    out.writeByte(0xff);\n\n    //---------------------------------\n    // Image Descriptor\n\n    out.writeString(',');\n    out.writeShort(0);\n    out.writeShort(0);\n    out.writeShort(_width);\n    out.writeShort(_height);\n    out.writeByte(0);\n\n    //---------------------------------\n    // Local Color Map\n\n    //---------------------------------\n    // Raster Data\n\n    const lzwMinCodeSize = 2;\n    const raster = getLZWRaster(lzwMinCodeSize);\n\n    out.writeByte(lzwMinCodeSize);\n\n    let offset = 0;\n\n    while (raster.length - offset > 255) {\n      out.writeByte(255);\n      out.writeBytes(raster, offset, 255);\n      offset += 255;\n    }\n\n    out.writeByte(raster.length - offset);\n    out.writeBytes(raster, offset, raster.length - offset);\n    out.writeByte(0x00);\n\n    //---------------------------------\n    // GIF Terminator\n    out.writeString(';');\n  };\n\n  const bitOutputStream = function(out) {\n\n    const _out = out;\n    let _bitLength = 0;\n    let _bitBuffer = 0;\n\n    const _this = {};\n\n    _this.write = function(data, length) {\n\n      if ( (data >>> length) != 0) {\n        throw 'length over';\n      }\n\n      while (_bitLength + length >= 8) {\n        _out.writeByte(0xff & ( (data << _bitLength) | _bitBuffer) );\n        length -= (8 - _bitLength);\n        data >>>= (8 - _bitLength);\n        _bitBuffer = 0;\n        _bitLength = 0;\n      }\n\n      _bitBuffer = (data << _bitLength) | _bitBuffer;\n      _bitLength = _bitLength + length;\n    };\n\n    _this.flush = function() {\n      if (_bitLength > 0) {\n        _out.writeByte(_bitBuffer);\n      }\n    };\n\n    return _this;\n  };\n\n  const getLZWRaster = function(lzwMinCodeSize) {\n\n    const clearCode = 1 << lzwMinCodeSize;\n    const endCode = (1 << lzwMinCodeSize) + 1;\n    let bitLength = lzwMinCodeSize + 1;\n\n    // Setup LZWTable\n    const table = lzwTable();\n\n    for (let i = 0; i < clearCode; i += 1) {\n      table.add(String.fromCharCode(i) );\n    }\n    table.add(String.fromCharCode(clearCode) );\n    table.add(String.fromCharCode(endCode) );\n\n    const byteOut = byteArrayOutputStream();\n    const bitOut = bitOutputStream(byteOut);\n\n    // clear code\n    bitOut.write(clearCode, bitLength);\n\n    let dataIndex = 0;\n\n    let s = String.fromCharCode(_data[dataIndex]);\n    dataIndex += 1;\n\n    while (dataIndex < _data.length) {\n\n      const c = String.fromCharCode(_data[dataIndex]);\n      dataIndex += 1;\n\n      if (table.contains(s + c) ) {\n\n        s = s + c;\n\n      } else {\n\n        bitOut.write(table.indexOf(s), bitLength);\n\n        if (table.size() < 0xfff) {\n\n          if (table.size() == (1 << bitLength) ) {\n            bitLength += 1;\n          }\n\n          table.add(s + c);\n        }\n\n        s = c;\n      }\n    }\n\n    bitOut.write(table.indexOf(s), bitLength);\n\n    // end code\n    bitOut.write(endCode, bitLength);\n\n    bitOut.flush();\n\n    return byteOut.toByteArray();\n  };\n\n  const lzwTable = function() {\n\n    const _map = {};\n    let _size = 0;\n\n    const _this = {};\n\n    _this.add = function(key) {\n      if (_this.contains(key) ) {\n        throw 'dup key:' + key;\n      }\n      _map[key] = _size;\n      _size += 1;\n    };\n\n    _this.size = function() {\n      return _size;\n    };\n\n    _this.indexOf = function(key) {\n      return _map[key];\n    };\n\n    _this.contains = function(key) {\n      return typeof _map[key] != 'undefined';\n    };\n\n    return _this;\n  };\n\n  return _this;\n};\n\nconst createDataURL = function(width, height, getPixel) {\n  const gif = gifImage(width, height);\n  for (let y = 0; y < height; y += 1) {\n    for (let x = 0; x < width; x += 1) {\n      gif.setPixel(x, y, getPixel(x, y) );\n    }\n  }\n\n  const b = byteArrayOutputStream();\n  gif.write(b);\n\n  const base64 = base64EncodeOutputStream();\n  const bytes = b.toByteArray();\n  for (let i = 0; i < bytes.length; i += 1) {\n    base64.writeByte(bytes[i]);\n  }\n  base64.flush();\n\n  return 'data:image/gif;base64,' + base64;\n};\n\nexport default qrcode;\n\nexport const stringToBytes = qrcode.stringToBytes;\n"],
  "mappings": "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",
  "names": ["typeNumber", "errorCorrectionLevel", "unicodeMap", "qrcode", "_num", "num", "_this", "data", "stringToBytes"]
}
